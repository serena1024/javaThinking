19.1基本Enum特性
        ordinal()返回枚举中每个示例在声明时的顺序，从0开始。可以使用==来比较Enum实例，编译器会自动为你提供
    equals和hashCode方法。Enum类实现了Comparable接口，所以它具有compareTo方法。同时它还实现了Serializable接口。
        如果在Enum实例上调用getDeclaringClass()方法，就会知道你其所属的类。
        name()方法返回enum实例声明时的名字，这与toString（）方法效果相同ValueOF是在Enum中定义的static方法，
        它根据给定的名字返回相应的Enum实例，如果不存在给定名字实例，将会抛出异常。
19.1.1 将静态导入用于enum
    使用static import能够将enum实例的标识符带入当前的命名空间，所以无需再用enum类型来修饰enum实例。
19.2 像enum中添加新方法
        除了不能继承自一个enum之外，我们基本上可以将enum看做一个常规类。也就是说我们可以向enum中添加方法，
     enum甚至可以有main（）。
        如果想自己定义方法，那么必须在enum的实例序列的最后加一个分号。同时java要求你必须先定义enum实例，否则在编译时
     会得到错误信息。
19.3 switch语句中的enum
     在switch中使用enum，是enum提供的一项非常遍历的功能。一般来说switch中只能使用整数值，而枚举实例天生就具备整数值
    的次序，并且可以通过ordinal()取得其次序。
19.11 多路分发
    Java只支持单路分发。也就是说，如果要执行的操作包含了不止一个类型的未知的对象时，那么Java的动态绑定机制就只能
   处理其中的一个类型。所以你必须自己来判定其他的类型，从而实现自己的动态绑定行为。
21.1并发的多面性
    用并发解决问题大致分为“速度”和“设计可管理性”两种。
21.1.1更快地执行
    并发通常是提高运行在单处理器上的程序的性能。
    如果程序中的某个任务因为该程序的控制之外的条件（通常是I/O）而导致不能继续执行，那么我们就说这个任务或线程阻塞了。
    实现并发的最直接的方式是在操作系统级别使用进程。进程是运行在它自己地址空间内的自包容的程序。
21.2 基本的线程机制
    并发编程使我们可以将程序划分为多个分离的、独立运行的任务。通过使用多线程机制，这些独立任务中的每一个都将又执行线程来驱动。
21.2.1 定义任务
    线程可以驱动任务，因此你需要一种描述任务的方式，这就可以由Runnable接口来提供。要想定义任务，只需实现Runnable接口并编写run()方法
  使得该任务可以执行你的命令。
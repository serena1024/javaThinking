21.1并发的多面性
    用并发解决问题大致分为“速度”和“设计可管理性”两种。
21.1.1更快地执行
    并发通常是提高运行在单处理器上的程序的性能。
    如果程序中的某个任务因为该程序的控制之外的条件（通常是I/O）而导致不能继续执行，那么我们就说这个任务或线程阻塞了。
    实现并发的最直接的方式是在操作系统级别使用进程。进程是运行在它自己地址空间内的自包容的程序。
21.2 基本的线程机制
    并发编程使我们可以将程序划分为多个分离的、独立运行的任务。通过使用多线程机制，这些独立任务中的每一个都将又执行线程来驱动。
21.2.1 定义任务
    线程可以驱动任务，因此你需要一种描述任务的方式，这就可以由Runnable接口来提供。要想定义任务，只需实现Runnable接口并编写run()方法
  使得该任务可以执行你的命令。
21.2.2 Thread类
    将Runnable对象转变为工作任务的传统方式是把它交给一个Thread构造器。
    Thread构造器就只需要一个Runnable对象。调用Thread对象的start()方法为该线程执行必须的初始化操作，然后再调用Runnable中的run(),
  以便在这个新的线程中启动该任务。
    一个线程会创建一个单独的执行线程，在对start()的调用完成之后，它仍旧会存在。
21.2.3 使用Executor
    java.util.concurrent.Executor将为你管理Thread对象，从而简化并发编程。
    SingleThreadPool就像是线程数量为1的FixedThreadPool
21.2.4 从任务中产生返回值
    Runnable是执行工作的独立任务，但是它不范湖任何值。如果你希望在任务完成时能返回一个值，那么可以实现一个Callable接口。
  java se5中引入的Callable是一种具有类型参数的泛型，他的类型参数表示的是从方法call()中返回的值，并且必须使用ExecutorService.submit()方法调用它
21.2.5 休眠
    影响任务行为的一种简单方法是调用sleep(),这将使任务中止执行给定的时间。
21.2.6 优先级
    线程的优先级将该线程的重要性传递给了调度器。尽管CPU处理现有线程集的顺序是不确定的，但是调度器倾向于让优先权高的线程先执行。
  然而这并不意味着优先权较低的线程将得不到执行（也就是说优先权不会导致死锁）。优先级较低的线程仅仅是执行的频率较低。可以使用getPriority()
  读取现有的优先级。
21.2.7 让步
    如果知道已经完成了run（）方法的循环的一次迭代过程中所需的工作，就可以给线程调度机制一个暗示：你的工作做的差不多了，可以让别的
  线程使用CPU了。这个方法将通过yield()方法来作出。只是一个暗示，不代表一定会被采纳。
21.2.8后台线程
    后台线程（daemon），是指程序在运行时在后台提供一种通用服务的线程，并且这种线程并不属于程序中不可或缺的部分。因此，当所有的非后台线程
  结束时，程序也就终止了，同时会杀死进程中所有的后台线程。
    可以通过isDaemon()来确定是否是一个后台线程。如果是一个后台线程，那么它创建的任何线程将被自动设置成后台线程。